"use client"

import React, { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Textarea } from "@/components/ui/textarea"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
  type DragEndEvent,
} from "@dnd-kit/core"
import { SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from "@dnd-kit/sortable"
import { restrictToVerticalAxis } from "@dnd-kit/modifiers"
import { SortableItem } from "./ui/sortable-item"
import { v4 as uuidv4 } from "uuid"
import {
  BookOpen,
  GraduationCap,
  Tag,
  PlayCircle,
  FileText,
  MessageSquare,
  Lightbulb,
  RefreshCw,
  ArrowRight,
  Sparkles,
  Loader2,
  Video,
  FileQuestion,
  GripVertical,
  Pencil,
  Trash2,
  Plus,
  Settings,
  ClipboardEdit,
  Wand2,
} from "lucide-react"
import type { 
  Module, 
  LearningObjective, 
  Skill, 
  LearningObject 
} from "@/store/courseWizardStore"

// Object type icons and colors
const objectTypeIcons = {
  video: Video,
  quiz: FileQuestion,
  discussion: MessageSquare,
  reading: BookOpen,
  activity: Lightbulb,
}

const objectTypeColors = {
  video: "bg-blue-100 text-blue-700 dark:bg-blue-950 dark:text-blue-300",
  quiz: "bg-green-100 text-green-700 dark:bg-green-950 dark:text-green-300",
  discussion: "bg-purple-100 text-purple-700 dark:bg-purple-950 dark:text-purple-300",
  reading: "bg-amber-100 text-amber-700 dark:bg-amber-950 dark:text-amber-300",
  activity: "bg-rose-100 text-rose-700 dark:bg-rose-950 dark:text-rose-300",
}

interface InteractiveCoursePreviewProps {
  courseTitle: string
  courseSummary: string
  modules: Module[]
  learningObjectives: LearningObjective[]
  skills: Skill[]
  learningObjects: LearningObject[]
  isLoading: boolean
  onLearningObjectsChange: (objects: LearningObject[]) => void
  onProceed: () => void
  onRegenerate: () => void
}

export function InteractiveCoursePreview({
  courseTitle,
  courseSummary,
  modules,
  learningObjectives,
  skills,
  learningObjects,
  isLoading,
  onLearningObjectsChange,
  onProceed,
  onRegenerate,
}: InteractiveCoursePreviewProps) {
  // State for reordering and managing learning objects
  const [regenerationNotes, setRegenerationNotes] = useState("")
  const [isRegenerationModalOpen, setIsRegenerationModalOpen] = useState(false)
  const [currentRegeneratingItem, setCurrentRegeneratingItem] = useState<LearningObject | null>(null)
  const [isRegeneratingCourse, setIsRegeneratingCourse] = useState(false)
  const [isNotesExpanded, setIsNotesExpanded] = useState(false)
  
  // DnD Sensors setup
  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    }),
  )

  // Function to filter and sort objects by module
  const getModuleObjects = (moduleId: string) => {
    return learningObjects
      .filter((obj) => obj.moduleId === moduleId)
      .sort((a, b) => a.position - b.position)
  }

  // Placeholder for rendering content type icon
  const getLectureTypeIcon = (type: string) => {
    const Icon = objectTypeIcons[type as keyof typeof objectTypeIcons] || FileText
    return <Icon className="h-4 w-4" />
  }

  // Open regeneration modal for an individual item
  const openRegenerationModal = (object: LearningObject) => {
    setCurrentRegeneratingItem(object)
    setRegenerationNotes("")
    setIsRegenerationModalOpen(true)
  }

  // Handle regeneration of an individual content item
  const handleRegenerateItem = () => {
    if (!currentRegeneratingItem) return
    
    setIsRegeneratingCourse(true)
    
    // Simulate API call to regenerate content item
    setTimeout(() => {
      // In a real implementation, you would call an API endpoint
      // Example: await regenerateContentItem(currentRegeneratingItem.id, regenerationNotes)
      
      const updatedObjects = learningObjects.map(obj => {
        if (obj.id === currentRegeneratingItem.id) {
          return {
            ...obj,
            title: `${obj.title} (Regenerated)`,
            description: regenerationNotes ? `Based on notes: ${regenerationNotes}` : obj.description
          }
        }
        return obj
      })
      
      onLearningObjectsChange(updatedObjects)
      setIsRegenerationModalOpen(false)
      setIsRegeneratingCourse(false)
      setCurrentRegeneratingItem(null)
      
      // Show success notification
      // toast({ title: "Content item regenerated successfully" })
    }, 1500) // Simulated delay
  }

  // Handle regeneration of the entire course
  const handleRegenerateCourse = () => {
    setIsRegeneratingCourse(true)
    
    // Call the parent component's regenerate function
    onRegenerate()
    
    // In a real implementation, you would also include the global notes
    // Example: await regenerateCourse(courseId, regenerationNotes)
  }

  // Handle drag end event for reordering objects
  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event

    if (over && active.id !== over.id) {
      const activeObject = learningObjects.find((obj) => obj.id === active.id)
      const overObject = learningObjects.find((obj) => obj.id === over.id)

      if (activeObject && overObject) {
        // Get all objects in the same module
        const moduleObjects = learningObjects.filter((obj) => 
          obj.moduleId === overObject.moduleId
        )

        // Find the indices
        const activeIndex = moduleObjects.findIndex((obj) => obj.id === active.id)
        const overIndex = moduleObjects.findIndex((obj) => obj.id === over.id)

        // Create a new array with the updated positions
        const updatedObjects = [...learningObjects]

        // Update the moduleId if it's different
        if (activeObject.moduleId !== overObject.moduleId) {
          const objIndex = updatedObjects.findIndex((obj) => obj.id === active.id)
          updatedObjects[objIndex] = {
            ...updatedObjects[objIndex],
            moduleId: overObject.moduleId,
          }
        }

        // Reorder positions
        unitObjects.forEach((obj, idx) => {
          const objIndex = updatedObjects.findIndex((o) => o.id === obj.id)
          if (objIndex !== -1) {
            updatedObjects[objIndex] = { ...updatedObjects[objIndex], position: idx }
          }
        })

        onLearningObjectsChange(updatedObjects)
      }
    }
  }

  // Open regeneration modal for an individual item
  const openRegenerationModal = (object: LearningObject) => {
    setCurrentRegeneratingItem(object)
    setRegenerationNotes("")
    setIsRegenerationModalOpen(true)
  }

  // Handle regeneration of an individual content item
  const handleRegenerateItem = async () => {
    if (!currentRegeneratingItem) return
    
    try {
      // This would be a real API call in production
      setIsRegeneratingCourse(true)
      
      console.log('Regenerating item:', currentRegeneratingItem.id)
      console.log('Regeneration notes:', regenerationNotes)
      
      // Simulate API call with delay
      await new Promise((resolve) => setTimeout(resolve, 1500))
      
      // Close modal and reset state
      setIsRegenerationModalOpen(false)
      setCurrentRegeneratingItem(null)
      setRegenerationNotes("")
    } catch (error) {
      console.error('Error regenerating item:', error)
    } finally {
      setIsRegeneratingCourse(false)
    }
  }

  // Handle regeneration of the entire course
  const handleRegenerateCourse = async () => {
    try {
      setIsRegeneratingCourse(true)
      
      // This would be a real API call in production
      console.log('Regenerating entire course')
      console.log('Global regeneration notes:', regenerationNotes)
      
      // Simulate API call with delay
      await new Promise((resolve) => setTimeout(resolve, 2000))
      
    } catch (error) {
      console.error('Error regenerating course:', error)
    } finally {
      setIsRegeneratingCourse(false)
    }
  }

  // Function to filter and sort objects by module
  const getModuleObjects = (moduleId: string) => {
    return learningObjects
      .filter((obj) => obj.moduleId === moduleId)
      .sort((a, b) => a.position - b.position)
  }

  // Placeholder for rendering content type icon
  const getLectureTypeIcon = (type: string) => {
    const IconComponent = objectTypeIcons[type as keyof typeof objectTypeIcons] || FileText
    return <IconComponent className={`h-4 w-4 ${objectTypeColors[type as keyof typeof objectTypeColors].split(' ')[1]}`} />
  }

  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center py-16">
        <Loader2 className="h-12 w-12 text-primary animate-spin mb-4" />
        <h3 className="text-lg font-medium">Loading Course Preview</h3>
        <p className="text-muted-foreground mt-2 text-center max-w-md">
          We're preparing your interactive course preview...
        </p>
      </div>
    )
  }

  return (
    <div className="space-y-8">
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <h2 className="text-2xl font-bold mr-2">Interactive Course Preview</h2>
            <Badge className="bg-primary/20 text-primary">
              <Sparkles className="h-3 w-3 mr-1" />
              AI-Generated
            </Badge>
          </div>
          
          <Button 
            onClick={() => setIsNotesExpanded(!isNotesExpanded)}
            variant="outline"
            size="sm"
            className="flex items-center"
          >
            <ClipboardEdit className="h-4 w-4 mr-2" />
            {isNotesExpanded ? 'Hide Notes' : 'Course Feedback & Notes'}
          </Button>
        </div>
        
        <p className="text-muted-foreground">
          Review and customize your course content. Drag and drop to reorder items, regenerate specific content, or add notes for comprehensive revisions.
        </p>
      </div>

      {/* Course Feedback & Regeneration Notes */}
      {isNotesExpanded && (
        <Card className="border-primary/20">
          <CardHeader className="pb-2">
            <CardTitle className="text-lg flex items-center">
              <ClipboardEdit className="h-5 w-5 mr-2 text-primary" />
              Course Feedback & Regeneration Notes
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Textarea
              placeholder="Add global feedback or instructions for AI regeneration of the entire course content..."
              className="min-h-[120px]"
              value={regenerationNotes}
              onChange={(e) => setRegenerationNotes(e.target.value)}
            />
            <div className="flex justify-end">
              <Button 
                onClick={handleRegenerateCourse}
                disabled={isRegeneratingCourse}
                className="bg-[#582873] hover:bg-[#582873]/90"
              >
                {isRegeneratingCourse ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Regenerating...
                  </>
                ) : (
                  <>
                    <Wand2 className="mr-2 h-4 w-4" />
                    Regenerate Course Content
                  </>
                )}
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      <ScrollArea className="h-[calc(100vh-300px)]">
        <div className="space-y-8 pr-4 pb-4">
          {/* Modules, Units and Learning Objects */}
          <DndContext
            sensors={sensors}
            collisionDetection={closestCenter}
            onDragEnd={handleDragEnd}
            modifiers={[restrictToVerticalAxis]}
          >
            {modules.map((module) => (
              <Card key={module.id} className="border-muted">
                <CardHeader className="bg-muted/30 pb-3">
                  <CardTitle className="text-xl">
                    Module {module.title}
                  </CardTitle>
                  <p className="text-sm text-muted-foreground">{module.description}</p>
                </CardHeader>
                <CardContent className="p-4 space-y-6">
                  {/* Module Content (Learning Objects) */}
                  <div className="space-y-4">
                    <SortableContext 
                      items={getModuleObjects(module.id).map(obj => obj.id)} 
                      strategy={verticalListSortingStrategy}
                    >
                      {getModuleObjects(module.id).map((object) => (
                        <SortableItem key={object.id} id={object.id}>
                          <div className="flex items-start border-l-2 border-muted pl-3 py-2 group">
                            <div className="flex-shrink-0 mt-0.5 mr-2 cursor-move opacity-50 group-hover:opacity-100">
                              <GripVertical className="h-5 w-5" />
                            </div>
                            
                            <div className="flex-shrink-0 mt-0.5 mr-2">
                              {getLectureTypeIcon(object.type)}
                            </div>
                            
                            <div className="flex-1">
                              <div className="flex items-center">
                                <span className={`text-xs font-medium px-1.5 py-0.5 rounded-sm ${objectTypeColors[object.type as keyof typeof objectTypeColors]}`}>
                                  {object.type.charAt(0).toUpperCase() + object.type.slice(1)}
                                </span>
                              </div>
                              
                              <h6 className="text-sm font-medium mt-1">
                                {object.title}
                              </h6>
                              
                              <p className="text-xs text-muted-foreground mt-1">
                                {object.description}
                              </p>
                            </div>
                            
                            <div className="flex space-x-1 items-start ml-2 opacity-0 group-hover:opacity-100 transition-opacity">
                              <Button 
                                size="icon" 
                                variant="ghost" 
                                className="h-7 w-7 rounded-full"
                                onClick={() => openRegenerationModal(object)}
                              >
                                <RefreshCw className="h-3.5 w-3.5" />
                                <span className="sr-only">Regenerate</span>
                              </Button>
                              
                              <Button 
                                size="icon" 
                                variant="ghost" 
                                className="h-7 w-7 rounded-full"
                                onClick={() => {
                                  const updatedObjects = learningObjects.filter(obj => obj.id !== object.id)
                                  onLearningObjectsChange(updatedObjects)
                                }}
                              >
                                <Trash2 className="h-3.5 w-3.5 text-destructive" />
                                <span className="sr-only">Delete</span>
                              </Button>
                            </div>
                              </div>
                            </SortableItem>
                          ))}
                        </SortableContext>

                        {/* Add new item button */}
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="ml-8 mt-2 text-xs h-8 text-muted-foreground"
                        >
                          <Plus className="h-3.5 w-3.5 mr-1" />
                          Add Content Item
                        </Button>
                      </div>
                    </div>
                  ))}
                </CardContent>
              </Card>
            ))}
          </DndContext>
          
          {/* Learning Outcomes */}
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center">
                <GraduationCap className="h-5 w-5 mr-2 text-primary" />
                Learning Outcomes
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h3 className="text-sm font-medium mb-2">Learning Objectives</h3>
                <ul className="space-y-2">
                  {learningObjectives.map((objective, index) => (
                    <li key={objective.id} className="text-sm flex">
                      <span className="font-medium text-primary mr-2">{index + 1}.</span>
                      <span className="text-muted-foreground">{objective.description}</span>
                    </li>
                  ))}
                </ul>
              </div>

              <Separator />

              <div>
                <h3 className="text-sm font-medium mb-2">Skills</h3>
                <div className="flex flex-wrap gap-2">
                  {skills.map((skill) => (
                    <Badge key={skill.id} variant="outline" className="bg-primary/10 text-primary">
                      <Tag className="h-3 w-3 mr-1" />
                      {skill.name}
                    </Badge>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </ScrollArea>

      {/* Fixed footer with primary action button */}
      <div className="fixed bottom-6 right-6 z-10">
        <Button 
          onClick={onProceed}
          className="bg-[#582873] hover:bg-[#582873]/90] h-12 px-6 shadow-md"
          size="lg"
        >
          Review & Publish
          <ArrowRight className="ml-2 h-5 w-5" />
        </Button>
      </div>

      {/* Regeneration Modal */}
      <Dialog open={isRegenerationModalOpen} onOpenChange={setIsRegenerationModalOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>Regenerate Content Item</DialogTitle>
            <DialogDescription>
              Provide specific instructions to guide the AI in regenerating this content item.
            </DialogDescription>
          </DialogHeader>
          
          <div className="py-4">
            <h3 className="text-sm font-medium mb-2">Current Content</h3>
            <div className="bg-muted/20 p-3 rounded-md mb-4">
              <div className="flex items-center mb-1">
                <span className={`text-xs font-medium px-1.5 py-0.5 rounded-sm ${currentRegeneratingItem ? objectTypeColors[currentRegeneratingItem.type as keyof typeof objectTypeColors] : ""}`}>
                  {currentRegeneratingItem ? currentRegeneratingItem.type.charAt(0).toUpperCase() + currentRegeneratingItem.type.slice(1) : ""}
                </span>
              </div>
              <h4 className="text-sm font-medium">{currentRegeneratingItem?.title}</h4>
              <p className="text-xs text-muted-foreground mt-1">{currentRegeneratingItem?.description}</p>
            </div>
            
            <Textarea
              placeholder="Add specific instructions for regeneration (e.g., 'Make this more interactive', 'Focus on practical applications', etc.)"
              className="min-h-[120px]"
              value={regenerationNotes}
              onChange={(e) => setRegenerationNotes(e.target.value)}
            />
          </div>
          
          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => {
                setIsRegenerationModalOpen(false)
                setCurrentRegeneratingItem(null)
              }}
            >
              Cancel
            </Button>
            <Button 
              onClick={handleRegenerateItem}
              className="bg-[#582873] hover:bg-[#582873]/90"
              disabled={isRegeneratingCourse}
            >
              {isRegeneratingCourse ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Regenerating...
                </>
              ) : (
                <>
                  <Wand2 className="mr-2 h-4 w-4" />
                  Regenerate
                </>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
